<?php

namespace Forte\Worker\Exceptions;

use Forte\Worker\Actions\AbstractAction;

/**
 * Class ActionException.
 *
 * @package Forte\Worker\Exceptions
 */
class ActionException extends WorkerException
{
    /**
     * The AbstractAction subclass instance that generated this exception.
     *
     * @var AbstractAction
     */
    protected $action;

    /**
     * A list of ActionException instances, generated by the children actions of the
     * AbstractAction subclass instance wrapped by this ActionException instance.
     *
     * @var array
     */
    protected $childrenFailures = [];

    /**
     * ActionException constructor.
     *
     * @param AbstractAction $action The AbstractAction subclass instance
     * that generated the error.
     * @param string $message The exception message.
     * @param int $code The exception code.
     * @param \Throwable|null $previous The previous error.
     */
    public function __construct(
        AbstractAction $action,
        string $message = "",
        int $code = 0,
        \Throwable $previous = null
    ) {
        parent::__construct($message, $code, $previous);
        $this->action = $action;
    }

    /**
     * Returns the AbstractAction subclass instance
     * that generated this error.
     *
     * @return AbstractAction
     */
    public function getAction(): AbstractAction
    {
        return $this->action;
    }

    /**
     * Return the list of failed children actions.
     *
     * @return array List of failed children actions.
     */
    public function getChildrenFailures(): array
    {
        return $this->childrenFailures;
    }

    /**
     * Add the given ActionException instance to the list of
     * children action failures.
     *
     * @param ActionException $actionException The failure to add.
     */
    public function addChildFailure(ActionException $actionException): void
    {
        $this->childrenFailures[] = $actionException;
    }

    /**
     * Return an array representation of this ActionException instance.
     *
     * @return array Array representation of this ActionException instance.
     */
    public function toArray(): array
    {
        $array = [];

        // The action
        $array['action'] = $this->action->stringify();

        // The error message
        $array['error_message'] = $this->message;

        // The error code
        $array['error_code'] = $this->code;

        // The children failures
        $array['children_failures'] = [];
        foreach ($this->childrenFailures as $childrenFailure) {
            if ($childrenFailure instanceof ActionException) {
                $array['children_failures'][] = $childrenFailure->toArray();
            }
        }

        return $array;
    }

    /**
     * Check if some fatal failures are found in the failures tree of this
     * ActionException instance.
     *
     * @return bool True if some fatal failures were found in the failures
     * tree of this ActionException instance.
     */
    public function hasFatalFailures(): bool
    {
        return $this->checkForFatalFailures($this);
    }

    /**
     * Check if some fatal failures were found in the failures tree
     * of this ActionException.
     *
     * @param ActionException $actionException The exception to be checked.
     *
     * @return bool True if some fatal failures were found in the
     * failures tree of this ActionException.
     */
    public static function checkForFatalFailures(ActionException $actionException): bool
    {
        $action = $actionException->getAction();
        if ($action->isFatal()) {
            return true;
        }

        foreach ($actionException->getChildrenFailures() as $actionFailure) {
            if (self::checkForFatalFailures($actionFailure)) {
                return true;
            }
        }
        return false;
    }
}
